version: '3.8'

services:
  caliandra:
    image: ubuntu:latest
    container_name: caliandra
    privileged: true
    stdin_open: true
    tty: true
    environment:
      - DEBIAN_FRONTEND=noninteractive
      - UFW_DEFAULT_INSTANCE=skip
    command: >
      /bin/bash -c "
      apt-get update && apt-get install -y iptables iproute2 traceroute ufw &&
      echo 1 > /proc/sys/net/ipv4/ip_forward &&
      iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE &&
      iptables -A FORWARD -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT &&
      iptables -A FORWARD -i eth1 -o eth0 -j ACCEPT &&
      ufw default allow outgoing &&
      ufw allow in on eth0 from 192.168.2.2 to any port 80,443 proto tcp &&
      ufw allow in on eth0 from 192.168.2.2 to any port 53 proto udp &&
      ufw allow in on eth0 from 192.168.2.2 to any port 465,587,995,143,993 proto tcp &&
      ufw allow in on eth0 from 192.168.2.3 &&
      ufw deny in on eth0 &&
      ufw allow in on eth0 from 192.168.2.3 to any port 80,443 proto tcp &&
      ufw allow in on eth0 from 192.168.2.3 to any port 53 proto udp &&
      ufw allow out on eth0 to any port 53 proto udp &&
      ufw allow in on eth0 from 192.168.2.3 to any port 465,587,995,143,993 proto tcp &&
      ufw deny in on eth0 to any port 5432 proto tcp &&
      ufw allow in on eth0 from 192.168.3.3 &&
      ufw logging on &&
      ufw enable &&
      tail -f /dev/null"
    networks:
      dmz_net:
        ipv4_address: 192.168.2.2
      external_net:
        ipv4_address: 192.168.1.2
    # command: ["sh", "-c", "/usr/local/bin/firewall.sh && tail -f /dev/null"]

  caiman:
    image: ubuntu:latest
    container_name: caiman
    privileged: true
    stdin_open: true
    tty: true
    command: >
      /bin/bash -c "
      apt-get update && apt-get install -y iptables iproute2 traceroute ufw &&
      echo 1 > /proc/sys/net/ipv4/ip_forward &&
      iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE &&
      iptables -A FORWARD -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT &&
      iptables -A FORWARD -i eth1 -o eth0 -j ACCEPT &&
      ip route del default || true &&
      ip route add default via 192.168.3.2 &&
      ufw --force reset &&
      ufw default deny incoming &&
      ufw default deny outgoing &&
      ufw allow in on internal_net &&
      ufw allow out on external_net &&
      ufw allow in on external_net &&
      ufw allow out on internal_net &&
      ufw allow in on eth0 to any port 22 proto tcp &&
      ufw allow out on eth0 to any port 53 proto udp &&
      ufw allow out on eth0 to any port 53 proto tcp &&
      ufw allow out on eth0 to any port 80 proto tcp &&
      ufw allow out on eth0 to any port 443 proto tcp &&
      ufw allow out on eth0 to any port 25 proto tcp &&
      ufw allow out on eth0 to any port 465 proto tcp &&
      ufw allow out on eth0 to any port 587 proto tcp &&
      ufw allow out on eth0 to any port 143 proto tcp &&
      ufw allow out on eth0 to any port 993 proto tcp &&
      ufw allow out on eth0 to any port 110 proto tcp &&
      ufw allow out on eth0 to any port 995 proto tcp &&
      ufw allow out on eth0 to any port 123 proto udp &&
      ufw allow out on eth0 to any port 8080 proto tcp &&
      ufw deny in on eth0 to any port 5432 proto tcp &&
      ufw deny in on internal_net to any port 80 proto tcp &&
      ufw deny in on internal_net to any port 443 proto tcp &&
      ufw allow in on eth0 from 192.168.3.0/24 to any port 5432 proto tcp &&
      sed -i 's/DEFAULT_FORWARD_POLICY=\"DROP\"/DEFAULT_FORWARD_POLICY=\"ACCEPT\"/' /etc/default/ufw &&
      ufw logging on &&
      ufw --force enable &&

      tail -f /dev/null"
    networks:
      dmz_net:
        ipv4_address: 192.168.2.3
      internal_net:
        ipv4_address: 192.168.3.2
    # command: ["sh", "-c", "/usr/local/bin/firewall.sh && tail -f /dev/null"]

  pc_interno:
    image: alpine:latest
    container_name: pc_interno
    privileged: true
    networks:
      internal_net:
        ipv4_address: 192.168.3.3
    command: ["sh", "-c", "ip route del default && ip route add default via 192.168.3.2 && tail -f /dev/null"]

  pc_externo:
    build:
      context: .
      dockerfile: Dockerfile.externo
    container_name: pc_externo
    privileged: true
    networks:
      external_net:
        ipv4_address: 192.168.1.3
    command: ["sh", "-c", "ip route del default && ip route add default via 192.168.1.2 && tail -f /dev/null"]

# DMZ
  dns:
    build:
      context: .
      dockerfile: Dockerfile.servidor
    container_name: dns_server
    networks:
      dmz_net:
        ipv4_address: 192.168.2.4
  ad:
    build:
      context: .
      dockerfile: Dockerfile.servidor
    container_name: ad_server
    networks:
      dmz_net:
        ipv4_address: 192.168.2.5
  web:
    build:
      context: .
      dockerfile: Dockerfile.servidor
    container_name: web_server
    networks:
      dmz_net:
        ipv4_address: 192.168.2.6
  bd:
    build:
      context: .
      dockerfile: Dockerfile.servidor
    container_name: bd_server
    networks:
      dmz_net:
        ipv4_address: 192.168.2.7
  app:
    build:
      context: .
      dockerfile: Dockerfile.servidor
    container_name: app_server
    networks:
      dmz_net:
        ipv4_address: 192.168.2.8
  arquivos:
    build:
      context: .
      dockerfile: Dockerfile.servidor
    container_name: arquivos_server
    networks:
      dmz_net:
        ipv4_address: 192.168.2.9

networks:
  external_net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/24
  dmz_net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.2.0/24
  internal_net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.3.0/24